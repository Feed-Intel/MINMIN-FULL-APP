name: deploy-staging-backend

on:
  push:
    branches: [main]
    paths:
      - 'MinMinBE/**'
      - '.github/workflows/deploy-be.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-west-3
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Image
        working-directory: MinMinBE
        env:
          ECR: ${{ secrets.ECR_BACKEND }}
        run: |
          GITSHA=$(git rev-parse --short HEAD)
          IMAGE="$ECR:$GITSHA"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          docker tag "$IMAGE" "$ECR:staging"
          docker push "$ECR:staging"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Register Task Definition
        working-directory: MinMinBE
        run: |
          jq --arg IMG "$IMAGE" '.containerDefinitions[0].image=$IMG' taskdef.json > taskdef.out.json
          aws ecs register-task-definition --cli-input-json file://taskdef.out.json

      - name: Run DB migrations (one-off task)
        working-directory: MinMinBE
        run: |
          FAMILY=$(jq -r '.family' taskdef.out.json)
          TD=$(aws ecs list-task-definitions --family-prefix "$FAMILY" --status ACTIVE --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text)
          aws ecs run-task \
            --cluster "${{ secrets.CLUSTER_NAME }}" \
            --launch-type EC2 \
            --task-definition "$TD" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNETS_PRIVATE }}],securityGroups=[${{ secrets.SG_APP }}],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides":[{"name":"backend","command":["python","manage.py","migrate"]}]}'

      - name: Update Service (rolling)
        run: |
          aws ecs update-service \
            --cluster "${{ secrets.CLUSTER_NAME }}" \
            --service "${{ secrets.SERVICE_NAME }}" \
            --force-new-deployment

      - name: Smoke Test
        run: curl -fsS "${{ secrets.HEALTH_URL }}"
