name: Deploy to Single EC2 (Docker Compose)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  API_IMAGE_NAME: minmin-api

jobs:
  build_api:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: owner
        run: echo "lc=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.owner.outputs.lc }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./MinMinBE
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_frontends:
    name: Build Frontends (static web)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install and build restaurantFE
        working-directory: restaurantFE
        env:
          EXPO_PUBLIC_API_URL: https://${{ vars.API_DOMAIN }}/api/v1
          EXPO_PUBLIC_BACKEND_URL: https://${{ vars.API_DOMAIN }}/api/
          EXPO_PUBLIC_IMAGE_PATH: https://${{ vars.API_DOMAIN }}
          EXPO_PUBLIC_WS_URL: wss://${{ vars.API_DOMAIN }}/ws/restaurant/
        run: |
          npm ci
          npx --yes expo export --platform web --non-interactive

      - name: Install and build customerFE
        working-directory: customerFE
        env:
          EXPO_PUBLIC_API_URL: https://${{ vars.API_DOMAIN }}/api/v1
          EXPO_PUBLIC_BACKEND_URL: https://${{ vars.API_DOMAIN }}/api
          EXPO_PUBLIC_BASE_URL: https://${{ vars.CUSTOMER_DOMAIN }}
          EXPO_PUBLIC_WS_URL: wss://${{ vars.API_DOMAIN }}/ws/user
        run: |
          npm ci
          npx --yes expo export --platform web --non-interactive

      - name: Upload restaurantFE artifact
        uses: actions/upload-artifact@v4
        with:
          name: restaurant-web-dist
          path: restaurantFE/dist

      - name: Upload customerFE artifact
        uses: actions/upload-artifact@v4
        with:
          name: customer-web-dist
          path: customerFE/dist

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [build_api, build_frontends]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: owner
        run: echo "lc=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Validate GHCR credentials and access
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE: ghcr.io/${{ steps.owner.outputs.lc }}/${{ env.API_IMAGE_NAME }}:latest
        run: |
          set -euo pipefail
          if [ -z "${GHCR_USERNAME:-}" ] || [ -z "${GHCR_TOKEN:-}" ]; then
            echo "::error::GHCR_USERNAME or GHCR_TOKEN is not set in repo secrets" >&2
            exit 1
          fi
          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
          # Try to pull the image built in the previous job; warn if first run
          if ! docker pull "$IMAGE" >/dev/null 2>&1; then
            echo "::warning::Could not pull $IMAGE. If this is the first deploy, this is expected. Credentials validated."
          else
            echo "Verified pull access to $IMAGE"
          fi
          docker logout ghcr.io

      - name: Verify required files exist in workspace
        run: |
          set -e
          ls -la
          ls -la deploy
          ls -la deploy/nginx
          ls -la deploy/nginx/conf.d

      - name: Create target directories on server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo mkdir -p \
              /opt/minmin/deploy \
              /opt/minmin/deploy/nginx \
              /opt/minmin/deploy/nginx/conf.d \
              /opt/minmin/nginx/conf.d
            sudo chown -R $USER:$USER /opt/minmin

      - name: Download restaurantFE artifact
        uses: actions/download-artifact@v4
        with:
          name: restaurant-web-dist
          path: dist/restaurant

      - name: Download customerFE artifact
        uses: actions/download-artifact@v4
        with:
          name: customer-web-dist
          path: dist/customer

      - name: Upload deployment bundle
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: deploy/**
          target: /opt/minmin/
          overwrite: true
          debug: true
          strip_components: 1

      - name: Verify compose and nginx on server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "Listing /opt/minmin:"
            ls -la /opt/minmin
            echo "Listing /opt/minmin/nginx:"
            ls -la /opt/minmin/nginx
            echo "Listing /opt/minmin/nginx/conf.d:"
            ls -la /opt/minmin/nginx/conf.d

      - name: Verify nginx files on server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "Listing /opt/minmin/nginx and conf.d on server:"
            ls -la /opt/minmin/nginx || true
            ls -la /opt/minmin/nginx/conf.d || true

      - name: Start nginx and smoke test
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # Ensure compose file exists
            test -f /opt/minmin/docker-compose.prod.yml || (echo "::error::Missing compose file at /opt/minmin/docker-compose.prod.yml" && exit 1)
            # Bring up only nginx to validate config loads
            sudo env API_IMAGE="ghcr.io/${{ steps.owner.outputs.lc }}/${{ env.API_IMAGE_NAME }}:latest" docker compose -f /opt/minmin/docker-compose.prod.yml up -d nginx
            # Allow container to boot
            sleep 3
            # Basic reachability check (do not fail on HTTP status)
            curl -I http://localhost || (echo "::error::Nginx not reachable on localhost" && exit 1)

      - name: Copy static sites to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            dist/restaurant/**
          target: /opt/minmin/restaurant

      - name: Copy static sites to server (customer)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            dist/customer/**
          target: /opt/minmin/customer

      - name: Remote setup & deploy
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/minmin/{customer,restaurant,media}
            sudo chown -R $USER:$USER /opt/minmin

            # Install Docker if missing
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com | sh
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "Installing docker compose plugin..."
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            # Login to GHCR for private image pulls
            echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            # Compose deploy env (for variable substitution like API_IMAGE)
            echo "API_IMAGE=ghcr.io/${{ steps.owner.outputs.lc }}/${{ env.API_IMAGE_NAME }}:latest" | sudo tee /opt/minmin/deploy.env >/dev/null

            # API application env
            sudo bash -c "echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' > /opt/minmin/api.env"
            sudo bash -c "echo 'DJANGO_SETTINGS_MODULE=minminbe.settings' >> /opt/minmin/api.env"
            sudo bash -c "echo 'DEBUG=false' >> /opt/minmin/api.env"
            sudo bash -c "echo 'ALLOWED_HOSTS=${{ vars.API_DOMAIN }},${{ vars.CUSTOMER_DOMAIN }},${{ vars.RESTAURANT_DOMAIN }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'CSRF_TRUSTED_ORIGINS=https://${{ vars.API_DOMAIN }},https://${{ vars.CUSTOMER_DOMAIN }},https://${{ vars.RESTAURANT_DOMAIN }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'DJANGO_ALLOWED_CORS_ORIGINS=https://${{ vars.CUSTOMER_DOMAIN }},https://${{ vars.RESTAURANT_DOMAIN }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'DATABASE_URL=${{ secrets.DATABASE_URL }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'REDIS_URL=${{ secrets.REDIS_URL }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'EMAIL_HOST=${{ vars.EMAIL_HOST || 'smtp.gmail.com' }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER || '' }}' >> /opt/minmin/api.env"
            sudo bash -c "echo 'EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD || '' }}' >> /opt/minmin/api.env"

            # Inject domain names into nginx vhosts
            if [ -f /opt/minmin/nginx/conf.d/api.conf ]; then
              sed -i "s/api.local/${{ vars.API_DOMAIN }}/g" /opt/minmin/nginx/conf.d/api.conf
            else
              echo "::error::Missing /opt/minmin/nginx/conf.d/api.conf on server"; ls -la /opt/minmin/nginx/conf.d || true; exit 1
            fi
            if [ -f /opt/minmin/nginx/conf.d/customer.conf ]; then
              sed -i "s/customer.local/${{ vars.CUSTOMER_DOMAIN }}/g" /opt/minmin/nginx/conf.d/customer.conf
            else
              echo "::error::Missing /opt/minmin/nginx/conf.d/customer.conf on server"; exit 1
            fi
            if [ -f /opt/minmin/nginx/conf.d/restaurant.conf ]; then
              sed -i "s/restaurant.local/${{ vars.RESTAURANT_DOMAIN }}/g" /opt/minmin/nginx/conf.d/restaurant.conf
            else
              echo "::error::Missing /opt/minmin/nginx/conf.d/restaurant.conf on server"; exit 1
            fi

            # Sanity check compose file present
            test -f /opt/minmin/docker-compose.prod.yml || (echo "::error::Missing compose file at /opt/minmin/docker-compose.prod.yml" && exit 1)

            sudo docker compose --env-file /opt/minmin/deploy.env -f /opt/minmin/docker-compose.prod.yml pull || true
            sudo docker compose --env-file /opt/minmin/deploy.env -f /opt/minmin/docker-compose.prod.yml up -d

            # Basic health check
            sleep 5
            curl -fsS http://localhost/healthz/ || (echo 'API health check failed' && sudo docker compose -f /opt/minmin/docker-compose.prod.yml logs api && exit 1)

      - name: Finalize stack and verify healthz
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # Ensure compose file exists
            test -f /opt/minmin/docker-compose.prod.yml
            # Make sure all services are up
            sudo docker compose -f /opt/minmin/docker-compose.prod.yml up -d
            # Header-only health check
            curl -I http://localhost/healthz/ | head -n1 | grep "200" || (echo '::error::/healthz did not return 200' && exit 1)
