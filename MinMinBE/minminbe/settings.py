"""
Django settings for minminbe project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import sys
from celery.schedules import crontab
from datetime import timedelta
import dj_database_url
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def get_ssm_parameter(name, default=None, with_decryption=True):
    return os.environ.get(name.split('/')[-1], default)


def get_secret(name, default=None):
    return os.environ.get(name.split('/')[-1], default)

SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
DEBUG = os.environ.get("DEBUG", "false").lower() == "true"
ENV = os.environ.get("ENV", "development")
CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(",") if os.environ.get("CSRF_TRUSTED_ORIGINS") else []
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",") if os.environ.get("ALLOWED_HOSTS") else []
REDIS_URL = os.environ.get("REDIS_URL", "redis://redis:6379/0")
S3_BUCKET_UPLOADS = os.environ.get("S3_BUCKET_UPLOADS", "")
SETTINGS_MODULE = os.environ.get("DJANGO_SETTINGS_MODULE", "minminbe.settings")
CORS_ALLOWED_ORIGINS = os.environ.get("DJANGO_ALLOWED_CORS_ORIGINS", "").split(",") if os.environ.get("DJANGO_ALLOWED_CORS_ORIGINS") else []

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

CORS_ALLOW_HEADERS = [
    "x-api-key",
    "authorization",
    "content-type",
    "x-requested-with",
    "accept",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-xsrf-token",
]

AUTH_USER_MODEL = "accounts.User"

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760

sys.path.insert(0, os.path.join(BASE_DIR, "restaurant"))
sys.path.insert(1, os.path.join(BASE_DIR, "customer"))

# ------------------------------------------------------------------------------
# URLs & Static/Media
# ------------------------------------------------------------------------------
LOGIN_REDIRECT_URL = "/admin/"
FRONTEND_BASE_URL = config("FRONTEND_BASE_URL", default="http://localhost:3000")

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# ------------------------------------------------------------------------------
# Applications
# ------------------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.sites",
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.gis",          # GeoDjango (required for PostGIS fields)
    "daphne",
    "leaflet",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_gis",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "rest_framework_api_key",
    "social_django",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "django_filters",
    "corsheaders",
    "accounts",
    "channels",
    "drf_yasg",
    "django_seed",
    "django_celery_beat",
    "loyalty",
    "feed",
    "pushNotification",
    "core",
    "restaurant.menu",
    "restaurant.branch",
    "restaurant.tenant",
    "restaurant.table",
    "restaurant.qr_code",
    "restaurant.menu_availability",
    "restaurant.combo",
    "restaurant.related_menu",
    "restaurant.discount",
    "customer.order",
    "customer.feedback",
    "customer.notification",
    "customer.cart",
    "customer.address",
    "customer.payment",
    "restaurant",
    "customer",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "accounts.middleware.LogEventsMiddleware",
]

# Optionally enable Django Silk if it's installed (place AFTER MIDDLEWARE is defined).
try:
    import silk  # type: ignore  # noqa: F401

    INSTALLED_APPS += ["silk"]
    MIDDLEWARE.insert(0, "silk.middleware.SilkyMiddleware")
except Exception:
    # Silk is optional; ignore if missing.
    pass

# Optionally enable django-extensions if installed.
try:
    import django_extensions  # type: ignore  # noqa: F401

    INSTALLED_APPS += ["django_extensions"]
except Exception:
    pass

AUTHENTICATION_BACKENDS = [
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.facebook.FacebookOAuth2",
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "minminbe.authentication.CookieJWTAuthentication"
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated"
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

ROOT_URLCONF = "minminbe.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",  # Required for django-allauth
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "minminbe.asgi.application"
WSGI_APPLICATION = "minminbe.wsgi.application"

# Channels (use REDIS_URL if provided)
if REDIS_URL:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": [REDIS_URL]},
        },
    }
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": [("127.0.0.1", 6379)]},
        },
    }

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "X-API-KEY": {
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header",
        },
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
        },
    },
    "USE_SESSION_AUTH": False,
}

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------
DATABASES = {
    "default": dj_database_url.config(default=os.environ.get("DATABASE_URL"), conn_max_age=600)
}

# ------------------------------------------------------------------------------
# Cache
# ------------------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL,
    }
}

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------------------------
# I18N
# ------------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Defaults
# ------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------------------------------------------------------------
# Social auth / Allauth
# ------------------------------------------------------------------------------
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "openid",
    "email",
    "profile",
]

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {"access_type": "online"},
    }
}

SOCIALACCOUNT_ADAPTER = "accounts.adapters.MySocialAccountAdapter"
SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_QUERY_EMAIL = True

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = get_ssm_parameter(
    "/minminbe/SOCIAL_AUTH_GOOGLE_OAUTH2_KEY",
    config("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY", default=""),
)
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = get_ssm_parameter(
    "/minminbe/SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET",
    config("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET", default=""),
)

SOCIAL_AUTH_FACEBOOK_KEY = get_ssm_parameter(
    "/minminbe/SOCIAL_AUTH_FACEBOOK_KEY",
    config("SOCIAL_AUTH_FACEBOOK_KEY", default=""),
)
SOCIAL_AUTH_FACEBOOK_SECRET = get_ssm_parameter(
    "/minminbe/SOCIAL_AUTH_FACEBOOK_SECRET",
    config("SOCIAL_AUTH_FACEBOOK_SECRET", default=""),
)

PUSH_KEY = get_ssm_parameter("/minminbe/PUSH_KEY", config("PUSH_KEY", default=""))

REST_USE_JWT = True
REST_AUTH_SERIALIZERS = {
    "JWTSerializer": "accounts.serializers.CustomTokenObtainPairSerializer",
}

# ------------------------------------------------------------------------------
# Celery
# ------------------------------------------------------------------------------
CELERY_BEAT_SCHEDULE = {
    "update_best_dishes": {
        "task": "restaurant.menu.tasks.update_best_dishes",
        "schedule": crontab(hour=0, minute=0),
    },
    "update_big_discount_items": {
        "task": "restaurant.discount.tasks.update_big_discount_items",
        "schedule": crontab(hour=0, minute=0),
    },
}

# ------------------------------------------------------------------------------
# Social auth pipeline
# ------------------------------------------------------------------------------
SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "social_core.pipeline.user.get_username",
    "social_core.pipeline.user.create_user",
    "accounts.pipelines.save_user_profile",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
)

# ------------------------------------------------------------------------------
# Email
# ------------------------------------------------------------------------------
EMAIL_BACKEND = "accounts.backends.email_backend.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = get_ssm_parameter("/minminbe/EMAIL_HOST_USER", config("EMAIL_HOST_USER", default=""))
EMAIL_HOST_PASSWORD = get_ssm_parameter("/minminbe/EMAIL_HOST_PASSWORD", config("EMAIL_HOST_PASSWORD", default=""))
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

GOOGLE_CLIENT_ID = get_ssm_parameter("/minminbe/GOOGLE_CLIENT_ID", config("GOOGLE_CLIENT_ID", default=""))
GOOGLE_AUTH_URL = get_ssm_parameter("/minminbe/GOOGLE_AUTH_URL", config("GOOGLE_AUTH_URL", default=""))
GOOGLE_CLIENT_SECRET = get_ssm_parameter("/minminbe/GOOGLE_CLIENT_SECRET", config("GOOGLE_CLIENT_SECRET", default=""))
REDIRECT_URL = config("REDIRECT_URL", default="http://localhost:8081")
MAX_FAILED_ATTEMPTS = 5
LOCKOUT_DURATION = 15

# ------------------------------------------------------------------------------
# Celery core broker/result
# ------------------------------------------------------------------------------
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = config("CELERY_RESULT_BACKEND", default="redis://localhost:6379/0")
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

# ------------------------------------------------------------------------------
# Seeding shortcuts (disable external services for seed commands)
# ------------------------------------------------------------------------------
SEEDING_COMMANDS = {"seed_customers", "seed_restaurant_data"}

if any(cmd in sys.argv for cmd in SEEDING_COMMANDS):
    # Disable all email functionality
    EMAIL_BACKEND = "django.core.mail.backends.dummy.EmailBackend"
    EMAIL_HOST = "localhost"
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ""
    EMAIL_HOST_PASSWORD = ""
    DEFAULT_FROM_EMAIL = ""

    # Disable Redis connections for Channels
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }

    # Disable Celery
    CELERY_BROKER_URL = "memory://"
    CELERY_RESULT_BACKEND = "cache"
    CELERY_CACHE_BACKEND = "memory"
    CELERY_TASK_ALWAYS_EAGER = True  # Run tasks synchronously

    # Disable logging
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": True,
        "handlers": {
            "null": {
                "class": "logging.NullHandler",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["null"],
                "level": "CRITICAL",
                "propagate": False,
            },
        },
    }
