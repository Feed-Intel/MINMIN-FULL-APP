"""
Django settings for alpha project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from decouple import config
import boto3
import sys
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

def get_ssm_parameter(name, with_decryption=True):
    ssm = boto3.client('ssm', region_name='us-east-1')
    return ssm.get_parameter(Name=name, WithDecryption=with_decryption)['Parameter']['Value']


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_ssm_parameter('/alpha/SECRET_KEY') or config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CSRF_TRUSTED_ORIGINS = [
    "https://alpha.feed-intel.com",
    "https://restaurant.feed-intel.com",
    "http://localhost:8081"
]

ALLOWED_HOSTS = ['*','34.230.37.121','localhost',"alpha.feed-intel.com","restaurant.feed-intel.com"]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

CORS_ALLOW_HEADERS = [
    "x-api-key",
    "authorization",
    "content-type",
    "x-requested-with",
    "accept",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-xsrf-token",
]


AUTH_USER_MODEL = 'accounts.User'

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760

sys.path.insert(0, os.path.join(BASE_DIR, "restaurant"))
sys.path.insert(1, os.path.join(BASE_DIR, "customer"))

# settings.py

LOGIN_REDIRECT_URL = '/admin/'  # Redirect to the admin dashboard
FRONTEND_BASE_URL = "http://localhost:3000"

# settings.py
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Collect static files here


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Application definition

INSTALLED_APPS = [
    'django.contrib.sites',
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'daphne',
    'leaflet',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_gis',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework_api_key',
    'social_django',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  
    'allauth.socialaccount.providers.facebook',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_filters',
    'corsheaders',
    'accounts',
    'channels',
    'drf_yasg',
    'django_seed',
    "django_celery_beat",
    'loyalty',
    'feed',
    'pushNotification',
    'restaurant.menu',
    'restaurant.branch',
    'restaurant.tenant',
    'restaurant.table',
    'restaurant.qr_code',
    'restaurant.menu_availability',
    'restaurant.combo',
    'restaurant.related_menu',
    'restaurant.discount',
    'customer.order',
    'customer.feedback',
    'customer.notification',
    'customer.cart',
    'customer.address',
    'customer.payment',
    'restaurant',
    'customer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Added middleware for allauth
    'accounts.middleware.LogEventsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'alpha.authentication.CookieJWTAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}


ROOT_URLCONF = 'alpha.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # Required for django-allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

ASGI_APPLICATION = 'alpha.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  
        },
    },
}

WSGI_APPLICATION = 'alpha.wsgi.application'
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'X-API-KEY': {
            'type': 'apiKey',
            'name': 'X-API-KEY',  # Header name for your API key
            'in': 'header'       # Indicates the key is sent in the HTTP header
        },
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,  # Disable session authentication if not required
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': get_ssm_parameter('/alpha/DB_NAME') or config('DB_NAME'),
        'USER': get_ssm_parameter('/alpha/DB_USER') or config('DB_USER'),
        'PASSWORD':get_ssm_parameter('/alpha/DB_PASSWORD')or config('DB_PASSWORD'),
        'HOST': get_ssm_parameter('/alpha/DB_HOST') or config('DB_HOST'),
        'PORT': get_ssm_parameter('/alpha/DB_PORT') or config('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.User'

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'openid',         # To retrieve the user's unique ID
    'email',          # To access the user's email address
    'profile',        # To get basic profile information (e.g., name, picture)
]


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

SOCIALACCOUNT_ADAPTER = 'accounts.adapters.MySocialAccountAdapter'

SITE_ID = 1


ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_QUERY_EMAIL = True


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '897496635501-nlc0r1ijbfadqo9osj49kf3br73cl8gp.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'

SOCIAL_AUTH_FACEBOOK_KEY = '596378576057611'
SOCIAL_AUTH_FACEBOOK_SECRET = 'cdab87d7e2a19967312cf5f38ba681f0'

PUSH_KEY = 'ExponentPushToken[4PvtZtLxAhe5adHAiAZDSb]'


REST_USE_JWT = True

REST_AUTH_SERIALIZERS = {
    'JWTSerializer': 'accounts.serializers.CustomTokenObtainPairSerializer',
}

CELERY_BEAT_SCHEDULE = {
    'update_best_dishes': {
        'task': 'restaurant.menu.tasks.update_best_dishes',
        'schedule': crontab(hour=0, minute=0),  # Runs at midnight
    },
    'update_big_discount_items': {
        'task': 'restaurant.discount.tasks.update_big_discount_items',
        'schedule': crontab(hour=0, minute=0),
    },
}


SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',       
    'social_core.pipeline.social_auth.social_uid',           
    'social_core.pipeline.social_auth.auth_allowed',         
    'social_core.pipeline.social_auth.social_user',          
    'social_core.pipeline.user.get_username',               
    'social_core.pipeline.user.create_user',                
    'your_app.pipelines.save_user_profile',                 
    'social_core.pipeline.social_auth.associate_user',      
    'social_core.pipeline.social_auth.load_extra_data',     
    'social_core.pipeline.user.user_details',               
)

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'accounts.backends.email_backend.EmailBackend'

EMAIL_HOST = 'smtp.gmail.com'
# settings.py
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = get_ssm_parameter('/alpha/EMAIL_HOST_USER') or config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_ssm_parameter('/alpha/EMAIL_HOST_PASSWORD') or config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
GOOGLE_CLIENT_ID = get_ssm_parameter('/alpha/GOOGLE_CLIENT_ID') or config('GOOGLE_CLIENT_ID')
GOOGLE_AUTH_URL = get_ssm_parameter('/alpha/GOOGLE_AUTH_URL') or config('GOOGLE_AUTH_URL')
GOOGLE_CLIENT_SECRET = get_ssm_parameter('/alpha/GOOGLE_CLIENT_SECRET') or config('GOOGLE_CLIENT_SECRET')
REDIRECT_URL = 'http://localhost:8081'
MAX_FAILED_ATTEMPTS = 5
LOCKOUT_DURATION = 15



SEEDING_COMMANDS = {'seed_customers', 'seed_restaurant_data'}

if any(cmd in sys.argv for cmd in SEEDING_COMMANDS):
    # Disable all email functionality
    EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
    EMAIL_HOST = 'localhost'
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    DEFAULT_FROM_EMAIL = ''
    
    # Disable Redis connections for Channels
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }
    
    # Disable Celery
    CELERY_BROKER_URL = 'memory://'
    CELERY_RESULT_BACKEND = 'cache'
    CELERY_CACHE_BACKEND = 'memory'
    CELERY_TASK_ALWAYS_EAGER = True  # Run tasks synchronously
    
    # Disable logging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'handlers': {
            'null': {
                'class': 'logging.NullHandler',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['null'],
                'level': 'CRITICAL',
                'propagate': False,
            },
        }
    }